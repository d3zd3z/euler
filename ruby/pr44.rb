#! /usr/bin/env ruby19
$-w = true
######################################################################
# Pentagonal numbers are generated by the formula,
# P_(n)=n(3n-1)/2. The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P_(4) + P_(7) = 22 + 70 = 92 = P_(8). However,
# their difference, 70 - 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, P_(j) and P_(k), for which
# their sum and difference is pentagonal and D = |P_(k) - P_(j)|
# is minimised; what is the value of D?
######################################################################

require 'set'

def pent(n)
  n*(3*n-1)/2
end

=begin
# Reasonable integer test.
def int?(x)
  (x - x.truncate).abs < 1.0e-6
end
# This is quite wrong.
# Using the quadratic equation, we conclude that a number is
# pentagonal iff (+/ sqrt(1+24*p)-1)/6 is an integer.
def pent?(p)
  term = Math::sqrt(1 + 24*p)
  return false unless int? term
  return true if int?((term - 1)/6)
  return true if int?((-term - 1)/6)
  false
end
=end

# Set based tester.
class PentTest
  def initialize
    @pents = Set.new
    @last_index = 0
    @last_pent = 0
  end

  def member?(n)
    gen while n > @last_pent
    @pents.member? n
  end

  private
  def gen
    @last_index += 1
    @last_pent = pent(@last_index)
    @pents.add @last_pent
  end
end

ptest = PentTest.new

# Sanity test.
=begin
1.upto(5000) do |x|
  a = pent? x
  b = ptest.member? x
  fail "Inconsistent result on #{x}" unless a == b
end
=end

# Enumerate the pairs, trying for small distance earlier.
# The iteration will stop once it finds the smallest value, but the
# inner loop amount was found by trial and error.  Larger values will
# take longer, and smaller values won't find the answer.
catch :done do
  1.upto(10000) do |span|
    1.upto(10000) do |a|
      b = a + span
      first = pent a
      second = pent b
      next unless ptest.member?(first + second)
      next unless ptest.member?(second - first)
      p (second - first)
      throw :done
    end
  end
end
