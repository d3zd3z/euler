package org.davidb.euler

//////////////////////////////////////////////////////////////////////
// Problem 2
//
// 19 October 2001
//
// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms
// will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do
// not exceed four million, find the sum of the even-valued terms.
//
// 4613732
//////////////////////////////////////////////////////////////////////

class Pr002: EulerSolution<Int>() {
    override val answer = 4613732
    override val num = 2

    override fun solve(): Int = pr002b()

    fun pr002a() {
        // Straightforward approach
        var total = 0
        var a = 1
        var b = 2
        while (b <= 4000000) {
            if (b % 2 == 0) {
                total += b
            }
            val tmp = a + b
            a = b
            b = tmp
        }
        println(total)
    }

    // Use an iterator that returns the fibonacci sequence, trying to be
    // careful to not overflow.  This iterator is specialized for this
    // problem, since it only wants the even numbers, we skip the initial
    // '1' value(s).
    // This may be slightly less efficient because the Iterator is
    // generic, the results end up being boxed.
    class FibIterator: Iterator<Int> {
        private var a = 1
        private var b = 1

        override operator fun hasNext(): Boolean {
            // This does seem to be the Javay way to do this.
            try {
                Math.addExact(a, b)
                return true
            } catch (_: ArithmeticException) {
                return false
            }
        }

        override operator fun next(): Int {
            val tmp = a + b
            a = b
            b = tmp
            return tmp
        }
    }

    fun pr002b(): Int =
        FibIterator()
            .asSequence()
            .takeWhile({it <= 4000000})
            .filter({it % 2 == 0})
            .sum()
}
