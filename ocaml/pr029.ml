(*
 * Problem 29
 *
 * 25 October 2002
 *
 *
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤
 * 5:
 *
 *     2^2=4, 2^3=8, 2^4=16, 2^5=32
 *     3^2=9, 3^3=27, 3^4=81, 3^5=243
 *     4^2=16, 4^3=64, 4^4=256, 4^5=1024
 *     5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *
 * If they are then placed in numerical order, with any repeats
 * removed, we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a^b for 2 ≤
 * a ≤ 100 and 2 ≤ b ≤ 100?
 *
 * 9183
 *)

open Core

module CNum = struct
  type t = Num.num
  let compare = Num.compare_num
  let sexp_of_t _ = failwith "TODO"
  let t_of_sexp _ = failwith "TODO"
end

(* TODO: Instead of using bignums, which seem to be neglected by Core,
 * we can the factorizations of the result. *)

module BS = Set.Make (CNum)

let euler29 () =
  let s = ref BS.empty in
  for a = 2 to 100 do
    for b = 2 to 100 do
      let n = Num.( **/ ) (Num.num_of_int a) (Num.num_of_int b) in
      s := BS.add !s n
    done
  done;
  BS.length !s

let run () = printf "%d\n" (euler29 ())
