      * Problem 12
      *
      * 08 March 2002
      *
      * The sequence of triangle numbers is generated by adding the
      * natural numbers. So the 7^th triangle number would be 1 + 2 + 3
      * + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
      *
      * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
      *
      * Let us list the factors of the first seven triangle numbers:
      *
      *      1: 1
      *      3: 1,3
      *      6: 1,2,3,6
      *     10: 1,2,5,10
      *     15: 1,3,5,15
      *     21: 1,3,7,21
      *     28: 1,2,4,7,14,28
      *
      * We can see that 28 is the first triangle number to have over
      * five divisors.
      *
      * What is the value of the first triangle number to have over
      * five hundred divisors?
      *
      * 76576500
       identification division.
       program-id. euler-problem-012.

       data division.
       working-storage section.
       01 working-counters.
         02 triangle-index      pic 9(8) comp-5.
         02 triangle-value      pic 9(8) comp-5.
       01 divisor-working-values.
         02 divisor-count       pic 9(8) comp-5.
         02 current-number      pic 9(8) comp-5.
         02 prime               pic 9(8) comp-5.
         02 divide-count        pic 9(8) comp-5.

       01 max-prime-number constant as 99999999.
       copy prime-sieve-data.

       procedure division.

       main.
           perform compute-primes
           perform scan-all-divisors

           display triangle-value

           stop run.

       scan-all-divisors.
           move zero to triangle-value
           perform
               with test after
               varying triangle-index from 1 by 1
               until divisor-count >= 500
             add triangle-index to triangle-value
             move triangle-value to current-number
             perform count-divisors
      D      display "value/index: " triangle-index " " triangle-value
      D              "  " divisor-count
           end-perform.

      * Compute the number of divisors in 'current-number', putting the
      * result into 'divisor-count'.  The other values under
      * 'divisor-working-values' are destroyed.
       count-divisors.
           move 2 to prime
           move 1 to divisor-count
           perform until current-number is equal to 1
             move zero to divide-count
             perform until function rem (current-number, prime)
                           not equal zero
               divide current-number by prime giving current-number
               add 1 to divide-count
             end-perform

             add 1 to divide-count
             multiply divide-count by divisor-count

             if current-number is greater than 1
               perform move-to-next-prime
             end-if
           end-perform.

       move-to-next-prime.
           perform with test after
                   until primes (prime) = 'Y'
             if prime = 2 then
               move 3 to prime
             else
               add 2 to prime
             end-if
           end-perform.

       copy prime-sieve-procedure.

       end program euler-problem-012.
