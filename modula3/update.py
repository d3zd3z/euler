#! /usr/bin/env python2

from __future__ import print_function

import glob
import re
import os.path

# Scan for the available modules, generate interfaces for them, the
# interface makefile, and the module table.

def update_interfaces(modules):
    dirty = False
    for m in modules:
        name = "interface/Pr%03d.i3" % m
        if not os.path.exists(name):
            print("Writing", name)
            dirty = True
            with open(name, 'w') as fd:
                print("INTERFACE Pr%03d;\nPROCEDURE Run ();\nEND Pr%03d.\n" % (m, m), file=fd)

    if dirty:
        print("Updating interface/m3makefile")
        with open("interface/m3makefile", 'w') as fd:
            for m in modules:
                print("interface(\"Pr%03d\")" % m, file=fd)

def update_problems(modules):
    print("Updating Problems.m3")
    with open("Problems.m3", 'w') as fd:
        print("(* Auto generated, do not edit *)\n", file=fd)
        print("MODULE Problems;\n", file=fd)
        for m in modules:
            print("IMPORT Pr%03d;" % m, file=fd)

        print("""
TYPE
  TproblemArray = ARRAY OF Tproblem;

PROCEDURE Bogus () =
  BEGIN
  END Bogus;

CONST
  problems = TproblemArray {""", file=fd)
        for m in modules:
            print("    Tproblem { number := %d, run := Pr%03d.Run }," %
                  (m, m), file=fd)
        print("""    Tproblem { number := -1, run := Bogus }
  };

PROCEDURE Count () : CARDINAL =
  BEGIN
    RETURN NUMBER (problems);
  END Count;

PROCEDURE Get (n : CARDINAL) : Tproblem =
  BEGIN
    RETURN problems[n];
  END Get;

BEGIN
END Problems.""", file=fd)

def update_m3makefile(modules):
    print("Updating m3makefile")

    # TODO: The template should come from somewhere other than here.
    with open('m3makefile', 'w') as fd:
        print("""% Autogenerated, do not edit

import("libm3")
implementation("Main")
include_dir("interface")
module("Problems")
module("Sieve")
""", file=fd)
        for m in modules:
            print("""implementation("Pr%03d")""" % m, file=fd)
        print("""
program("euler")""", file=fd)

name_re = re.compile(r'Pr([0-9][0-9][0-9])\.m3')

def main():
    names = glob.glob('Pr[0-9][0-9][0-9].m3')
    modules = set()

    for name in names:
        m = name_re.match(name)
        if not m:
            raise Exception('Bad name pattern')
        modules.add(int(m.group(1)))

    update_interfaces(modules)
    update_problems(modules)
    update_m3makefile(modules)

if __name__ == "__main__":
    main()
