//////////////////////////////////////////////////////////////////////
// Problem 12
//
// 08 March 2002
//
// The sequence of triangle numbers is generated by adding the natural
// numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6
// + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five
// divisors.
//
// What is the value of the first triangle number to have over five
// hundred divisors?
//
//////////////////////////////////////////////////////////////////////
// 76576500

package pr012

import "euler"
import "fmt"

func Run() {
	var sieve euler.Sieve

	n := 1
	tri := 1
	for {
		if divisorCount(&sieve, tri) > 500 {
			break
		}
		n += 1
		tri += n
	}
	fmt.Printf("%d\n", tri)
}

func divisorCount(sieve *euler.Sieve, n int) (result int) {
	result = 1
	tmp := n
	prime := 2

	for tmp > 1 {
		dcount := 0
		for tmp%prime == 0 {
			tmp /= prime
			dcount += 1
		}

		result *= dcount + 1

		if tmp > 1 {
			prime = sieve.NextPrime(prime)
		}
	}

	return
}
