/*
 * Problem 29
 *
 * 25 October 2002
 *
 *
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤
 * 5:
 *
 *     2^2=4, 2^3=8, 2^4=16, 2^5=32
 *     3^2=9, 3^3=27, 3^4=81, 3^5=243
 *     4^2=16, 4^3=64, 4^4=256, 4^5=1024
 *     5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *
 * If they are then placed in numerical order, with any repeats
 * removed, we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a^b for 2 ≤
 * a ≤ 100 and 2 ≤ b ≤ 100?
 */

import std.stdio;
import std.bigint;
import std.container;

// Note that storing BigInt in an associative array doesn't seem to
// work, since it is based on the binary representation, which might
// be different depending on how we got to the number.  But, the red
// black tree is quite a bit slower.

uint euler29() {
    auto found = redBlackTree!BigInt();

    foreach (a; 2 .. 101) {
	auto aa = BigInt(a);
	foreach (b; 2 .. 101)
	    found.stableInsert(aa ^^ b);
    }
    return cast(uint) found.length;
}

unittest {
    writeln(euler29());
}

