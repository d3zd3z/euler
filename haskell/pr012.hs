----------------------------------------------------------------------
-- The sequence of triangle numbers is generated by adding the natural
-- numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 +
-- 6 + 7 = 28. The first ten terms would be:
--
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--      1: 1
--      3: 1,3
--      6: 1,2,3,6
--      10: 1,2,5,10
--      15: 1,3,5,15
--      21: 1,3,7,21
--      28: 1,2,4,7,14,28
--
-- We can see that 28 is the first triangle number to have over five
-- divisors.
--
-- What is the value of the first triangle number to have over five
-- hundred divisors?

module Main where

import Data.List (group)
import qualified Primes

main :: IO ()
main = print answer
   where
      answer = fst . head . filter ((> 500) . snd) $ values
      values = zip triangles counts
      counts = map factorCount triangles

-- All of the triangle numbers.
triangles :: [Int]
triangles = gen 0 1
   where
      gen prior n = prior+n : gen (prior+n) (n+1)

factorCount :: Int -> Int
factorCount = product . map ((1 +) . snd) . primeFactors

primeFactors :: Int -> [(Int, Int)]
primeFactors n = map (\x -> (head x, length x)) (group answer)
   where
      answer = seek n Primes.fprimes
      seek 1 _ = []
      seek _ [] = undefined
      seek x fs@(f:fr)
         | x `mod` f == 0   = f : seek (x `div` f) fs
         | f > x            = error "Factoring coding error"
         | otherwise        = seek x fr

primes :: [Int]
primes = 2 : 3 : [x | x <- [5..], isPrime x]

isPrime :: Int -> Bool
isPrime n = filter (\x -> n `mod` x == 0) factors == []
   where
      factors = takeWhile (<= (floor (sqrt $ fromIntegral n :: Double))) primes
