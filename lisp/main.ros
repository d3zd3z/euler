#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.main.3815159910
  (:use :cl))
(in-package :ros.script.main.3815159910)

;; For now, just assume we're in the directory the script is in.
;; TODO: figure out how to find the script directory and load the
;; system from there.
(push *default-pathname-defaults* asdf:*central-registry*)
(asdf:load-system "euler")

(defvar *time-tests* nil)

(defun run-one (num fun)
  (format t "~&~a: " num)
  (let ((result (if *time-tests*
                    (time (funcall fun))
                    (funcall fun))))
    (format t "~a~%" result)))

;; The arguments should either be the single string "all", or a list
;; of numbers.

;; Convert the arguments to integers.
(defun decode-args (args)
  (mapcar #'parse-integer args))

(defun main (&rest argv)
  (declare (ignorable argv))
  (cond ((equalp argv '("all"))
         (time (euler/problem-set::run-all)))
        ((null argv)
         (format t "~&Usage: main {all | 1 2 3 etc}~%"))
        (t
         (time (euler/problem-set::run-multiple (decode-args argv))))))
;;; vim: set ft=lisp lisp:
