// Problem 12
//
// 08 March 2002
//
//
// The sequence of triangle numbers is generated by adding the natural
// numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
// 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five
// divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?
//
// 76576500

use sieve::Sieve;

define_problem!(pr012, 12, 76576500);

fn pr012() -> u64 {
    let mut primes = Sieve::new();

    for tri in TriIter::new() {
        if divisor_count(&mut primes, tri) > 500 {
            return tri;
        }
    }

    unreachable!();
}

fn divisor_count(sieve: &mut Sieve, n: u64) -> u64 {
    let mut result = 1;
    let mut tmp = n;
    let mut prime = 2;

    while tmp > 1 {
        let mut divide_count = 0;
        while tmp % prime == 0 {
            tmp /= prime;
            divide_count += 1;
        }

        result *= divide_count + 1;

        if tmp > 1 {
            prime = sieve.next_prime(prime as usize) as u64;
        }
    }

    return result
}

// An iterator over the triangle numbers.
struct TriIter {
    n: u64,
    tri: u64
}

impl TriIter {
    pub fn new() -> TriIter {
        TriIter {
            n: 1,
            tri: 1,
        }
    }
}

impl Iterator for TriIter {
    type Item = u64;

    fn next(&mut self) -> Option<u64> {
        let result = self.tri;

        self.n += 1;
        self.tri += self.n;
        Some(result)
    }
}
