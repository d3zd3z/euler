// Problem 29
//
// 25 October 2002
//
//
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//     2^2=4, 2^3=8, 2^4=16, 2^5=32
//     3^2=9, 3^3=27, 3^4=81, 3^5=243
//     4^2=16, 4^3=64, 4^4=256, 4^5=1024
//     5^2=25, 5^3=125, 5^4=625, 5^5=3125
//
// If they are then placed in numerical order, with any repeats removed, we
// get the following sequence of 15 distinct terms:
//
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤
// 100 and 2 ≤ b ≤ 100?

use sieve::*;
use std::map::*;

fn main() {
    let primes = Sieve();
    let values = HashMap::<@Factors, ()>();

    for uint::range(2, 101) |a| {
        let base = primes.factorize(a);

        for uint::range(2, 101) |b| {
            let elt = @Factors {elts: power(base, b)};
            set_add(values, elt);
        }
    }

    io::println(fmt!("%u", values.size()));
}

fn power(base: &[Factor], exp: uint) -> ~[Factor] {
    let mut result = ~[];

    for base.each |f| {
        result.push(Factor {prime: f.prime, power: f.power * exp});
    }

    result
}

// Explicitly box the vector so that we can '@' it.
struct Factors {
    elts: ~[Factor]
}

impl Factors: cmp::Eq {
    #[inline(always)]
    pure fn eq(other: &Factors) -> bool { self.elts == other.elts }
    #[inline(always)]
    pure fn ne(other: &Factors) -> bool { self.elts != other.elts }
}

impl Factors: to_bytes::IterBytes {
    #[inline(always)]
    pure fn iter_bytes(lsb: bool, f: to_bytes::Cb) {
        self.elts.iter_bytes(lsb, f);
    }
}
